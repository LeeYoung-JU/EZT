<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.adm.mapper.AdminMapper">
	<!-- 통계관련 -->
	<select id="selectJoinStatistics" resultType="java.util.HashMap">
		SELECT COUNT(1) num
		        , TO_CHAR(users_join_dt+1, 'yyyy-MM-dd') dt
		        , users_role role
		FROM users
		WHERE 
			<![CDATA[
		    users_join_dt < (SELECT TO_DATE(TO_CHAR(MAX(users_join_dt)+1, 'yyyy-MM-dd'), 'yyyy-MM-dd') FROM users)
		    ]]>
		    AND users_role IN ('ROLE_USER', 'ROLE_WORKER')
		GROUP BY TO_CHAR(users_join_dt+1,'yyyy-MM-dd'), users_role
		ORDER BY TO_CHAR(users_join_dt+1,'yyyy-MM-dd')
	</select>
	
	<select id="selectReqCategoryStatistics" resultType="java.util.HashMap">
		SELECT COUNT(*) num
		        , NVL(FIND_COMMONCODE(category_code), 'ERROR') category
		FROM request
		GROUP BY category_code
		ORDER BY category_code
	</select>
	<select id="selectReqRegionStatistics" resultType="java.util.HashMap">
		SELECT COUNT(*) num
        		, NVL(FIND_COMMONCODE(region_code), 'ERROR') region
		FROM request
		GROUP BY region_code
	</select>
	<select id="selectCrrAcptWaitCnt" resultType="int">
		SELECT COUNT(*) num
		FROM career
		WHERE career_access_tf = 'A01'
	</select>
	<select id="selectUsersCnt" resultType="int">
		SELECT COUNT(*) num
		FROM users
		WHERE users_role IN ('ROLE_USER', 'ROLE_WORKER')
	</select>
	<select id="selectReqCnt" resultType="int">
		SELECT COUNT(*) num
		FROM request
	</select>
	<!-- 의뢰 관련 -->
	<select id="selectRequests" resultType="RequestVO">
		SELECT r.request_no
              ,r.requester
              ,FIND_COMMONCODE(r.ctt_place) as ctt_place
              ,r.title
              ,r.content
              ,r.write_dt
              ,r.request_state as request_state
              ,FIND_COMMONCODE(r.request_state) as request_state_nm
              ,f.save_path
              ,f.save_name
              ,f.original_file_name
              ,f.ext
              ,FIND_COMMONCODE(r.category_code) as category_code
              ,FIND_COMMONCODE(r.region_code) as region_code
              ,(SELECT users_name
              	FROM users
              	WHERE users_no = r.requester) users_name
        FROM request r
	        LEFT OUTER JOIN file_detail_info f
	        ON r.file_id = f.file_id AND f.boss_tf = 'Y'
        ORDER BY write_dt DESC
	</select>
<!--	<select id="selectRequest" parameterType="int" resultType="RequestVO">-->
<!--		SELECT *-->
<!--		FROM request-->
<!--		WHERE request_no = #{requestNo}-->
<!--	</select>-->
	
	
	<!-- 유저관련 -->
	<select id="selectUsers" resultType="UserVO">
		SELECT u.users_no
				, u.users_id
				, u.users_email
				, u.users_birth
				, u.users_rnn
				, u.users_gender
				, u.users_name
				, u.users_phone
				, u.users_state
				, FIND_COMMONCODE(u.users_state) users_state_nm
				, u.users_nick
				, u.users_role
				, u.users_join_dt
				, u.file_id
				, f.save_path
				, f.save_name
				, f.original_file_name
				, f.ext
		FROM users u
		LEFT JOIN file_detail_info f
		ON u.file_id = f.file_id
		ORDER BY u.users_join_dt DESC
	</select>
	<select id="selectUser" parameterType="int" resultType="UserVO">
		SELECT u.users_no
				, u.users_id
				, u.users_email
				, u.users_birth
				, u.users_rnn
				, u.users_gender
				, u.users_name
				, u.users_phone
				, u.users_state
				, FIND_COMMONCODE(u.users_state) users_state_nm
				, u.users_nick
				, u.users_role
				, u.users_join_dt
				, u.file_id
				, f.save_path
				, f.save_name
				, f.original_file_name
				, f.ext
		FROM users
		LEFT JOIN file_detail_info f
		ON u.file_id = f.file_id
		WHERE u.users_no = #{uno}
	</select>
	
	<update id="updateUsersStatePause" parameterType="int">
		UPDATE users
		SET users_state = 'pause'
			, users_state_change_dt = sysdate
		WHERE users_no = #{uno}
	</update>
	<update id="updateUsersStateActive" parameterType="int">
		UPDATE users
		SET users_state = 'active'
			, users_state_change_dt = sysdate
		WHERE users_no = #{uno}
	</update>
	
	<!-- 통일 계약서 관련 -->
	<select id="selectUnityContracts" resultType="UnityContractVO">
		SELECT unity_contract_no
				, contract_terms_content
				, write_dt
				, use_tf
				, basic_contract_tf
				, title
				, changes
		FROM unity_contract
		ORDER BY unity_contract_no DESC
	</select>
	<select id="selectUnityContract" parameterType="int" resultType="UnityContractVO">
		SELECT unity_contract_no
				, contract_terms_content
				, write_dt
				, use_tf
				, basic_contract_tf
				, title
				, changes
		FROM unity_contract
		WHERE unity_contract_no = #{no}
	</select>
	<insert id="insertUnityContract" parameterType="UnityContractVO">
		<selectKey	keyProperty="unityContractNo"
					resultType="Integer"
					order="AFTER">
			SELECT SEQ_UNITYCONTRACT.CURRVAL
			FROM dual
		</selectKey>
		INSERT INTO unity_contract (
			unity_contract_no
			, contract_terms_content
			, title
			, changes
			, basic_contract_tf
		) VALUES (
			SEQ_UNITYCONTRACT.NEXTVAL
			, #{contractTermsContent}
			, #{title}
			, #{changes}
			, 'N'
		)
	</insert>
	<update id="updateUnityContractBasicTfN">
		UPDATE unity_contract
		SET basic_contract_tf = 'N'
	</update>
	<update id="updateUnityContractBasicTfY">
		UPDATE unity_contract
		SET basic_contract_tf = 'Y'
		WHERE unity_contract_no = #{no}
	</update>
	
	
	<!-- 경력 인증 관련 -->
	<select id="selectCareers" resultType="CareerVO">
		SELECT c.career_no
				, c.users_no
				, (	SELECT users_name
					FROM users
					WHERE users_no = c.users_no) users_name
				, c.career_info
				, c.career_start_dt
				, c.career_end_dt
				, c.file_id
				, c.career_access_tf
				, FIND_COMMONCODE(c.career_access_tf) career_access_tf_Nm
				, c.write_dt
		FROM career c
		ORDER BY write_dt DESC
	</select>
	<select id="selectCareer" parameterType="int" resultType="CareerVO">
		SELECT c.career_no
				, c.users_no
				, (	SELECT users_name
					FROM users
					WHERE users_no = c.users_no) users_name
				, c.career_info
				, c.career_start_dt
				, c.career_end_dt
				, c.file_id
				, c.career_access_tf
				, FIND_COMMONCODE(c.career_access_tf) career_access_tf_Nm
				, c.write_dt
				, f.save_path
				, f.save_name
				, f.original_file_name
				, f.ext
		FROM career c
		LEFT JOIN file_detail_info f
		ON c.file_id = f.file_id
		WHERE career_no = #{no}
		ORDER BY write_dt DESC
	</select>
	<update id="updateCareerAccept" parameterType="int">
		UPDATE career
		SET career_access_tf = 'A02'
		WHERE career_no = #{no}
	</update>
	<update id="updateCareerDeny" parameterType="int">
		UPDATE career
		SET career_access_tf = 'A03'
		WHERE career_no = #{no}
	</update>
	<insert id="insertCareerDeny" parameterType="Map">
		INSERT INTO career_deny(
			content
			, writer
			, career_no
		) VALUES (
			#{content}
			, #{writer}
			, #{careerNo}
		)
	</insert>
	<delete id="deleteCareerDeny" parameterType="int">
		DELETE FROM career_deny
		WHERE career_no = #{no}
	</delete>
	
	
	<!-- 결제 대금 관리 전체 조회 -->
	<sql id="selectPay">
		WITH unpaid_sum AS (
		    SELECT contract_no, SUM(price) as total_unpaid
		    FROM contract_detail
		    WHERE payment_tf = 'N'
		    GROUP BY contract_no
		)
		SELECT
		    c.contract_no,
		    rq.title,
		    rq.category_code,
		    FIND_COMMONCODE(rq.category_code) category_code_nm,
		    p.pay_no,
		    p.requester,
		    username(p.requester) requester_name,
		    c.requester_account,
		    pp.worker,
		    username(pp.worker) worker_name,
		    c.worker_account,
		    p.price,
		    p.pay_dt,
		    cd.payment_dt,
		    cd.payment_tf,
		    cd.history,
		    NVL(us.total_unpaid, 0) AS unpaid_sum
		FROM pay p
		JOIN contract c ON p.contract_no = c.contract_no
		JOIN contract_detail cd ON c.contract_no = cd.contract_no
		JOIN proposal pp ON c.proposal_no = pp.proposal_no
		JOIN request rq ON rq.request_no = pp.request_no
		LEFT JOIN unpaid_sum us ON cd.contract_no = us.contract_no
		WHERE cd.payment_dt = (
		    SELECT MIN(cd_inner.payment_dt)
		    FROM contract_detail cd_inner
		    WHERE cd_inner.contract_no = cd.contract_no
		      AND cd_inner.payment_tf = 'N'
		)
	</sql>
	<select id="selectPayManages" resultType="java.util.HashMap">
		<include refid="selectPay"></include>
	</select>
	<select id="selectPayManage" resultType="java.util.HashMap">
		<include refid="selectPay"></include> AND p.pay_no = #{payNo}
	</select>
	<select id="selectContractDetails" resultType="ContractDetailVO">
		SELECT cd.contract_detail_no
		       , cd.contract_no
		       , cd.price
		       , cd.payment_dt
		       , cd.history
		       , cd.payment_tf
		       , cd.round
		FROM contract_detail cd
		JOIN pay p
		ON cd.contract_no = p.contract_no
		WHERE p.pay_no = #{payNo}
		ORDER BY cd.round
	</select>
</mapper>