<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.usr.mapper.UserMapper">
	<!-- 사원정보 조회 -->
	<select id="selectUserInfo" resultType="UserVO">
		SELECT u.users_no
				, u.users_id
				, u.users_pw
				, u.users_email
				, u.users_birth
				, u.users_rnn
				, u.users_gender
				, u.users_name
				, u.users_phone
				, u.users_nick
				, u.users_role
				, u.users_join_dt
				, u.users_state_change_dt
				, u.users_state
				, u.file_id
				, f.save_path
				, f.save_name
				, f.original_file_name
				, f.ext
		FROM users u
			LEFT JOIN file_detail_info f
			ON u.file_id = f.file_id
		WHERE u.users_id = #{id}
	</select>
	<!-- 회원가입 시 DB중복체크 -->
	<select id="idChk" resultType="int">
		SELECT COUNT(*)
		FROM users
		WHERE users_id = #{usersId}
	</select>
	
	<select id="emailChk" resultType="int">
		SELECT COUNT(*)
		FROM users
		WHERE users_email = #{usersEmail}
	</select>
	
	<select id="nickChk" resultType="int">
		SELECT COUNT(*)
		FROM users
		WHERE users_nick = #{usersNick}
	</select>
	
	<select id="rnnChk" resultType="int">
		SELECT COUNT(*)
		FROM users
		WHERE users_rnn = #{usersRnn}
	</select>
	<!-- 사용자 회원가입 -->
	<insert id="saveUser" parameterType="com.yedam.app.usr.service.UserVO">
		<selectKey keyProperty="usersNo" resultType="Integer" order="BEFORE">
			SELECT SEQ_USERS.NEXTVAL
			FROM dual
		</selectKey>
		INSERT INTO users(users_no, users_role, users_id, users_pw, users_name
							, users_phone, users_nick, users_email, users_rnn
							, users_state, users_gender, users_birth, users_state_change_dt)
		VALUES(#{usersNo}, #{usersRole}, #{usersId}, #{usersPw}, #{usersName}
				, #{usersPhone}, #{usersNick}, #{usersEmail}, #{usersRnn}
				, 'active', #{usersGender}, #{usersBirth}, sysdate)
	</insert>
	
	<!-- 작업자 회원가입 -->
	<insert id="saveWorker">
		<selectKey keyProperty="usersNo" resultType="Integer" order="BEFORE">
			SELECT SEQ_USERS.NEXTVAL as usersNo
			FROM dual	 
		</selectKey>

		INSERT ALL 
		INTO users(users_no, users_role, users_id, users_pw, users_name, users_phone
					, users_nick, users_email, users_birth, users_rnn, users_state
					, users_gender, users_state_change_dt)
		VALUES(#{usersNo}, #{usersRole}, #{usersId}, #{usersPw}, #{usersName}
				, #{usersPhone}, #{usersNick}, #{usersEmail}, #{usersBirth}
				, #{usersRnn}, 'active', #{usersGender}, sysdate)
					
		INTO license( license_no, license_detail_no, users_no,  write_dt, file_id) 
		VALUES ( SEQ_LICENSE.NEXTVAL, #{licenseVO.licenseDetailNo}, #{usersNo}, sysdate, #{licenseVO.fileId} )

	
		<foreach item="region" collection="regionCode" separator="">
		INTO active_region( users_no, region_code ) 
		VALUES ( #{usersNo}, #{region} )
		</foreach>

	
		<foreach item="category" collection="categoryCode" separator="">
		INTO active_category( users_no, category_code )
		VALUES (#{usersNo}, #{category} )
		</foreach>
	
		SELECT *
		FROM dual
	</insert>
	
	
	<!-- 현재 로그인한 암호화된 pw조회 --> 
	<select id="selectEncPw" resultType="String">
		SELECT users_pw 
		FROM users
		WHERE users_no = #{usersNo}		
	</select>
	<!-- 비밀번호 변경 -->
	<update id="updatePw">
		UPDATE users
		SET users_pw = #{newPassword}
		WHERE users_no = #{usersNo}
	</update>
	
	<!-- 사용자 정보변경 -->
	<update id="updateUserInfo" parameterType="UserVO">
		UPDATE users
		SET 
			<if test="fileId != 0">
		      file_id = #{fileId},
		    </if>
			users_nick = #{usersNick},
			users_phone = #{usersPhone},
			users_email = #{usersEmail}
		WHERE users_id = #{usersId} 
	</update>
	

	<!-- 후기목록 -->
	<select id="selectUserRvwList" resultType="ReviewVO">
		SELECT c.*
		FROM (	SELECT ROWNUM as rn
					, a.*	
				FROM (SELECT re.review_no 
					   , re.request_no
					   , re.write_dt
					   , re.star
					   , re.content 
					   , USERNAME(re.worker) as worker_name
					   , re.review_division
					   , FIND_COMMONCODE(rq.category_code) as category_code
					   , FIND_COMMONCODE(rq.region_code) as region_code
					  FROM review re
					      JOIN request rq
				  	      ON re.request_no = rq.request_no
					  WHERE re.writer = #{writer}
					<if test="categoryCode != null and categoryCode != ''.toString()">
						AND category_code = #{categoryCode}
					</if>
					<if test="regionCode != null and regionCode != ''.toString()">
						AND region_code = #{regionCode}
					</if>
					  ORDER BY re.write_dt DESC ) a 
			  ) c
		 <![CDATA[
		 WHERE c.rn <= #{pageNum} * #{amount} AND
		 	   c.rn > (${pageNum} -1 ) * #{amount}
		 ]]>
	</select>
	
	<!-- 후기(리뷰)목록 데이터갯수 조회 -->
	<select id="getTotalReviewCount" resultType="int">
		SELECT COUNT(*)
		FROM (SELECT re.star
			   , re.content 
			   , USERNAME(re.worker) as worker_name
			   , re.review_division
			   , FIND_COMMONCODE(rq.category_code) as category_code
			   , FIND_COMMONCODE(rq.region_code) as region_code
			  FROM review re
		    	  JOIN request rq
		    	  ON re.request_no = rq.request_no
			  WHERE re.writer = #{writer}
		  	<if test="categoryCode != null and categoryCode != ''.toString()">
					AND category_code = #{categoryCode}
			</if>
			<if test="regionCode != null and regionCode != ''.toString()">
					AND region_code = #{regionCode}
			</if>)
	</select>
	
	<!-- 의뢰목록 -->
	<select id="selectUserReqList" resultType="RequestVO">
	   SELECT c.*		  
	   FROM ( 
   	   		 SELECT ROWNUM as rn
   	   		 		, a.*
   	   		 FROM ( SELECT r.request_no
						   , r.title
						   , r.category_code
						   , FIND_COMMONCODE(r.category_code) as category_code_nm
						   , r.request_state
						   , FIND_COMMONCODE(r.request_state) as request_state_nm
						   , r.file_id
						   , r.write_dt
						   , NVL((SELECT rv.review_no
					         	  FROM review rv
					         	  WHERE rv.request_no = r.request_no
					         	  AND rownum = 1),0) review_no
					FROM request r
					WHERE r.requester = #{usersNo}
					<if test="categoryCode != null and categoryCode != ''.toString()">
						AND category_code = #{categoryCode}
					</if>
					<if test="requestState != null and requestState != ''.toString()">
						AND request_state = #{requestState}
					</if>
					ORDER BY r.write_dt DESC ) a 
			 ) c
		<![CDATA[
		WHERE c.rn <= #{pageNum} * #{amount} AND
			  c.rn > (#{pageNum} -1 ) * #{amount}
		]]>
	</select>
	
	<!-- 의뢰목록 데이터갯수 조회 -->
	<select id ="getTotalRequestCount" resultType="int">
		SELECT COUNT(*)
		FROM (SELECT request_no
					   , title
					   , category_code
					   , FIND_COMMONCODE(category_code) as category_code_nm
					   , request_state
					   , FIND_COMMONCODE(request_state) as request_state_nm
					   , file_id
				FROM request
				WHERE requester = #{usersNo}
				<if test="categoryCode != null and categoryCode != ''.toString()">
						AND category_code = #{categoryCode}
				</if>
				<if test="requestState != null and requestState != ''.toString()">
					AND request_state = #{requestState}
				</if>)
	</select>
	
	<!-- 사용자계약서 목록조회 -->
	<select id="selectUserContractList" parameterType="ContractVO">
		 SELECT c.*		  
	   FROM ( 
   	   		 SELECT ROWNUM as rn
   	   		 		, a.*
   	   		 FROM ( SELECT c.ctt_name
   	   		 			   , c.contract_no
   	   		 			   , FIND_COMMONCODE(c.contract_state) as contract_state_nm
   	   		 			   , c.ctt_start_dt
   	   		 			   , c.ctt_end_dt
   	   		 			   , c.write_dt
   	   		 			   , c.update_dt
   	   		 			   , r.title
					FROM contract c
					    LEFT JOIN proposal p ON c.proposal_no = p.proposal_no
					    LEFT JOIN request r ON r.request_no = p.request_no
					WHERE c.requester_info = #{usersNo}
					ORDER BY c.contract_no DESC) a 
			 ) c
		<![CDATA[
		WHERE c.rn <= #{pageNum} * #{amount} AND
			  c.rn > (#{pageNum} -1 ) * #{amount}
		]]>
	</select>
	<!-- 사용자 계약서데이터 갯수조회 -->
	<select id="getTotalUserCtt" resultType="int">
		SELECT COUNT(*)
		FROM (SELECT *
			  FROM contract
			  WHERE requester_info = #{usersNo}
			 )
	</select>
	
	<!-- 사용자 결제명세서 목록조회 -->
	<select id="selectUserPayList" parameterType="PayVO">
		 SELECT c.*		  
	   FROM ( 
   	   		 SELECT ROWNUM as rn
   	   		 		, a.*
   	   		 FROM ( SELECT *
					FROM pay
					WHERE requester = #{usersNo}
					ORDER BY pay_no DESC) a 
			 ) c
		<![CDATA[
		WHERE c.rn <= #{pageNum} * #{amount} AND
			  c.rn > (#{pageNum} -1 ) * #{amount}
		]]>
	</select>
	<!-- 사용자 결제명세서 데이터갯수 조회 -->
	<select id="getTotalUserPay" resultType="int">
		SELECT COUNT(*)
		FROM( SELECT *
			  FROM pay
			  WHERE requester = #{usersNo}
	 		 )
	</select>
	
	<!-- 회원 탈퇴 -->
	<update id="updateUserState" parameterType="UserVO">
		UPDATE users
		SET users_state = 'quit'
		WHERE users_id = #{usersId}
	</update>
	
	<!-- 작업자 찾기Where절 -->
	<sql id="findWorker">
	   WHERE users_role = 'ROLE_WORKER'
	   AND users_state = 'active'
	   <if test="categoryCode != null and categoryCode.size != 0">   
	    AND EXISTS (SELECT 1
                 FROM active_category ca
                WHERE ca.users_no = users.users_no
                AND category_code
	    <foreach item="item" index="index" collection="categoryCode"
	        open=" in (" separator="," close=")" >
	          #{item}
        </foreach>)
      </if>
      <if test="regionCode != null and regionCode.size != 0">
        AND EXISTS(SELECT 1
           FROM active_region re
           WHERE re.users_no = users.users_no
           AND region_code 
        <foreach item="item" index="index" collection="regionCode"
	        open=" in (" separator="," close=")" >
	          #{item}
        </foreach>)
      </if>
	</sql>
	
	<!-- 작업자 찾기 -->
	<select id="selectFindWorkerList" parameterType="UserVO">
		SELECT c.*		  
   	   	FROM ( SELECT ROWNUM as rn
   	   		 		  , a.*
			   FROM (SELECT *
				     FROM users
				     LEFT JOIN file_detail_info f
				     	  ON users.file_id = f.file_id
				     <include refid="findWorker"></include>		
				     
				     ORDER BY users_join_dt DESC ) a 
			  ) c
	    <![CDATA[
 	    WHERE c.rn <= #{pageNum} * #{amount} AND 
		      c.rn > (#{pageNum} -1 ) * #{amount} 
	    ]]>
	</select>
	
	<!-- 작업자 총 수계산 -->
	<select id="getTotalWorkerCount" resultType="int">
		SELECT COUNT(*)
		FROM (SELECT *
			  FROM users
			  <include refid="findWorker"></include>)
	</select>
	

</mapper>