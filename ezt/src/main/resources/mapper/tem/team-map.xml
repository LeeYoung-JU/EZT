<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.tem.mapper.TeamMapper">
<resultMap type="TeamVO" id="twcMap">
	<id column="team_no" property="teamNo"/>
	<collection property="workCategoryVO" javaType="ArrayList"  column="team_no" ofType="TeamWorkCategoryVO" select="countMember" />
</resultMap>
<!-- criteria -->
<sql id="criteria">
	<trim prefixOverrides="OR">
    	<foreach item='type' collection="typeArr">
    		<trim prefix="OR">
    			<choose>
    				<when test="type == 'C'.toString()">
    					a.category_code like '%'||#{keyword}||'%'
    				</when>
    				<when test="type == 'R'.toString()">
    					a.region_code like '%'||#{keyword}||'%'
    				</when>
    			</choose>
    		</trim>
    	</foreach>
    </trim>
</sql>
<!-- 팀신청 전체 조회 -->
<select id="teamList" resultMap="twcMap">
	SELECT d.*
FROM (
    SELECT ROWNUM as rn
        , a.*
    FROM (SELECT 
    		 t.team_no
			,t.work_title
			,t.work_content
			,t.writer
			,USERNAME(t.writer) as writer_name
			,t.write_dt
			,t.contract_no
			,FIND_COMMONCODE(r.region_code) as region_code
			,r.request_no
			, (SELECT  SUM(headcount)
		       FROM team_work_category
			   WHERE team_no = t.team_no) head_count
	FROM team t
		JOIN contract c
		ON c.contract_no = t.contract_no
		JOIN proposal p
		ON p.proposal_no = c.proposal_no
		JOIN request r
		ON r.request_no = p.request_no
	ORDER BY write_dt DESC) a
	<where><include refid="criteria"></include></where>) d
<![CDATA[
WHERE d.rn <= #{pageNum} * #{amount} AND
    d.rn > (#{pageNum} - 1) * #{amount}
]]>
</select>

<!-- 전체 게시물 수 -->
<select id="getTotalCount" resultType="int">
	SELECT COUNT(*)
	FROM (SELECT t.team_no
				,t.work_title
				,t.work_content
				,t.writer
				,USERNAME(t.writer) as writer_name
				,t.write_dt
				,t.contract_no
				,FIND_COMMONCODE(r.region_code) as region_code
				,r.request_no
				, (SELECT  SUM(headcount)
			       FROM team_work_category
				   WHERE team_no = t.team_no) head_count
		  FROM team t
		JOIN contract c
		ON c.contract_no = t.contract_no
		JOIN proposal p
		ON p.proposal_no = c.proposal_no
		JOIN request r
		ON r.request_no = p.request_no) a
   	<where>
		<include refid="criteria"></include>	
		AND team_no > 0
	</where>
</select>
<!-- 팀신청 단건조회 -->
<select id="teamInfo" resultMap="twcMap">
	SELECT   t.team_no
			,t.work_title
			,t.work_content
			,USERNAME(t.writer) as writer_name
			,t.write_dt
			,t.contract_no
			,FIND_COMMONCODE(r.region_code) as region_code
			,r.request_no
			,t.writer
			
	FROM team t
		JOIN contract c
		ON c.contract_no = t.contract_no
		JOIN proposal p
		ON p.proposal_no = c.proposal_no
		JOIN request r
		ON r.request_no = p.request_no
		
	WHERE t.team_no = #{teamNo}
</select>
<!-- 의뢰 찾기 -->
<select id="findRequest" resultType="TeamVO">
	SELECT 
           r.request_no
           
    FROM   contract c
    
        JOIN proposal p
        ON p.proposal_no = c.proposal_no
        JOIN request r
        ON r.request_no = p.request_no
        
   WHERE contract_no = #{contractNo}
    
</select>
<!-- 팀신청 카테고리 별 인원 -->
<select id="countMember" resultType="TeamWorkCategoryVO">
	SELECT   FIND_COMMONCODE(w.work_code) as work_code
        ,w.work_code as category_code
        ,w.team_no
        ,w.headcount
        ,w.hire_complete_tf
        ,(SELECT COUNT(*)
          FROM member m 
          WHERE m.work_code = w.work_code) part_count
        ,(SELECT COUNT(*)
		  FROM member_enroll
		  WHERE work_code = w.work_code and process_result = 'A01') as v_count
	FROM team_work_category w    
	WHERE team_no = #{teamNo}
</select>

<!-- 팀 신청하기 -->
<insert id="insertTeam" parameterType="TeamVO">
	<selectKey keyProperty="teamNo"
				resultType="Integer"
				order="BEFORE">
	
		SELECT seq_team.NEXTVAL
		FROM dual			
	</selectKey>

	INSERT	INTO team 
	
		(	team_no
			,work_title
			,work_content
			,writer
			,write_dt
			,contract_no
			,delete_tf
		)
		
	VALUES
		(
			#{teamNo}
			,#{workTitle}
			,#{workContent}
			,#{writer}
			,sysdate
			,#{contractNo}
			,'N'
		)
		
	
</insert>
<!-- 팀신청 수정하기(제목, 내용) -->
<update id="updateTeam" parameterType="TeamVO">
	UPDATE team
	
	SET work_title = #{workTitle}
		,work_content = #{workContent}
		
	WHERE team_no = #{teamNo}
</update>

<!-- 팀신청 삭제하기 -->
<delete id="deleteTeam" parameterType="int">
	DELETE FROM team
	WHERE team_no = #{teamNo}
</delete>

<!-- 팀신청 상세 등록(카테고리,카테고리 별 인원) -->
<insert id="insertCategory" parameterType="TeamWorkCategoryVO">
	INSERT INTO team_work_category
	(
		 work_code
		,headcount
		,hire_complete_tf
		,team_no
	)
	VALUES
	(
		#{workCode}
		,#{headcount}
		,'F'
		,#{twcTeamNo}
	)
</insert>

<!-- 팀신청 상세 수정하기 -->
<update id="updateCategory" parameterType="TeamWorkCategoryVO">
	UPDATE team_work_category
	
	SET	work_code = #{workCode}
		,headcount = #{headcount}
		,hire_complete_tf = #{hireCompleteTf}
	WHERE team_no = #{teamNo} and work_code = #{categoryCode}
</update>

<!-- 팀신청 상세 삭제하기 -->
<delete id="deleteCategory" parameterType="TeamWorkCategoryVO">
	DELETE FROM team_work_category
	WHERE team_no = #{teamNo} and work_code = #{workCode}
</delete>

<!-- 카테고리별 지원자 조회 -->
<select id="volunteerList">
	SELECT   m.enroll_no
			,USERNAME(m.worker) as worker
			,m.worker as users_no
			,m.content
			,m.process_result
			,FIND_COMMONCODE(m.work_code) as work_code_Nm
			,m.work_code
			,m.team_no
			,(SELECT
                SUM(trunc ( ( months_between ( c.career_end_dt, c.career_start_dt ) ) / 12 ))
              FROM career
              WHERE users_no = m.worker)as career
	FROM member_enroll m
		JOIN users u
		ON u.users_no = m.worker
		LEFT OUTER JOIN career c
		ON u.users_no = c.users_no
	WHERE team_no = #{teamNo} 
		and work_code = #{workCode}
		and process_result = 'A01'
	ORDER BY process_result		
</select>
<!-- 지원자 반려  member_deny - insert, member_enroll - update -->
<update id="updateMemberEnroll" statementType="CALLABLE" parameterType="MemberDenyVO">
	{CALL
		memberdeny(#{enrollNo},#{content},#{writer})
	}
</update>
<!-- 팀원 신청하기 -->
<insert id="insertMember" parameterType="MemberEnrollVO">
    <selectKey keyProperty="enrollNo"
               resultType="Integer"
               order="BEFORE">
        SELECT seq_enroll.NEXTVAL
        FROM dual
    </selectKey>
    INSERT INTO member_enroll
        (
            enroll_no
            ,worker
            ,content
            ,process_result
            ,work_code
            ,team_no
        )
    VALUES
        (
            #{enrollNo}
            ,#{worker}
            ,#{content}
            ,'A01'
            ,#{workCode}
            ,#{teamNo}
        )
</insert>

<!-- 지원자 승인 member - insert, member_enroll - update -->
<update id="approveMember" statementType="CALLABLE" parameterType="MemberVO">
	{CALL
		memberinsert(#{enrollNo},
					 #{usersNo},
					 #{workCode},
					 #{teamNo},
					 #{result ,mode=OUT,jdbcType=INTEGER})
	}
</update>
</mapper>